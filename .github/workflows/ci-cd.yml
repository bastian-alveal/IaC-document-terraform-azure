name: Terraform CI/CD v3

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Acción a ejecutar: deploy o destroy"
        required: true
        default: "deploy"
        type: choice
        options: [deploy, destroy]
      target_module:
        description: "Módulo a ejecutar (o all para todos)"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - network
          - bd
          - containerapp
          - appservice
          # - vm-test-red-bd
          # - vm-tailscale

permissions:
  id-token: write
  contents: read

jobs:
  # ---------------------- BLOB ----------------------
  # blob:
  #   name: Blob Storage
  #   runs-on: ubuntu-latest
  #   if: >
  #     (github.event.inputs.action == 'deploy' &&
  #      (github.event.inputs.target_module == 'all' || github.event.inputs.target_module == 'blob')) ||
  #     (github.event.inputs.action == 'destroy' &&
  #      (github.event.inputs.target_module == 'blob'))
  #   environment: blob-approval
  #   defaults:
  #     run:
  #       working-directory: IaC-azure-blob-storage
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
  #     - run: terraform init
  #     - run: |
  #         if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
  #           terraform plan -out=tfplan
  #           terraform apply -auto-approve tfplan
  #         else
  #           terraform destroy -auto-approve
  #         fi

  # ---------------------- NETWORK ----------------------
  network:
    name: Network
    runs-on: ubuntu-latest
    if: >
      (github.event.inputs.action == 'deploy' &&
      (github.event.inputs.target_module == 'all' || github.event.inputs.target_module == 'network')) ||
      (github.event.inputs.action == 'destroy' &&
      (github.event.inputs.target_module == 'network'))
    environment: network-approval
    defaults:
      run:
        working-directory: IaC-azure-networks
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
      - run: terraform init
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
      - run: |
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
          else
            terraform destroy -auto-approve
          fi
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}

  # ---------------------- DATABASE ----------------------
  bd:
    name: Database
    runs-on: ubuntu-latest
    if: >
      (github.event.inputs.action == 'deploy' &&
      (github.event.inputs.target_module == 'all' || github.event.inputs.target_module == 'bd')) ||
      (github.event.inputs.action == 'destroy' &&
      (github.event.inputs.target_module == 'bd'))
    environment: bd-approval
    defaults:
      run:
        working-directory: IaC-azure-bd
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - run: terraform init
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}

      - run: |
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
          else
            terraform destroy -auto-approve
          fi
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
          TF_VAR_db_user: ${{ secrets.DB_USER }}
          TF_VAR_db_pass: ${{ secrets.DB_PASS }}

  # ---------------------- CONTAINER APP ----------------------
  containerapp:
    name: Container App
    runs-on: ubuntu-latest
    if: >
      (github.event.inputs.action == 'deploy' &&
       (github.event.inputs.target_module == 'all' || github.event.inputs.target_module == 'containerapp')) ||
      (github.event.inputs.action == 'destroy' &&
       (github.event.inputs.target_module == 'containerapp'))
    environment: container-approval
    defaults:
      run:
        working-directory: IaC-azure-containerapp

    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}

      - name: Terraform Plan & Apply
        run: |
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            terraform plan -out=tfplan \
              -var="ghcr_username=${{ secrets.GHCR_USERNAME }}" \
              -var="ghcr_pat=${{ secrets.GHCR_PAT }}" \
              -var="container_image=${{ secrets.CONTAINER_IMAGE }}" \
              -var="container_image_tag=${{ secrets.CONTAINER_IMAGE_TAG }}"

            terraform apply -auto-approve tfplan
          else
            terraform destroy -auto-approve \
              -var="ghcr_username=${{ secrets.GHCR_USERNAME }}" \
              -var="ghcr_pat=${{ secrets.GHCR_PAT }}" \
              -var="container_image=${{ secrets.CONTAINER_IMAGE }}" \
              -var="container_image_tag=${{ secrets.CONTAINER_IMAGE_TAG }}"
          fi
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}

  # ---------------------- APP SERVICE ----------------------
  appservice:
    name: App Service
    runs-on: ubuntu-latest
    if: >
      (github.event.inputs.action == 'deploy' &&
      (github.event.inputs.target_module == 'all' || github.event.inputs.target_module == 'appservice')) ||
      (github.event.inputs.action == 'destroy' &&
      (github.event.inputs.target_module == 'appservice'))
    environment: appservice-approval
    defaults:
      run:
        working-directory: IaC-azure-appservice
    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - run: terraform init
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}

      # - run: |
      #     if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
      #       terraform plan -out=tfplan \
      #         -var="ghcr_username=${{ secrets.GHCR_USERNAME }}" \
      #         -var="ghcr_pat=${{ secrets.GHCR_PAT }}" \
      #         -var="app_image=${{ secrets.APP_IMAGE }}" \
      #         -var="app_image_tag=${{ secrets.APP_IMAGE_TAG }}"

      #       terraform apply -auto-approve tfplan
      #     else
      #       terraform destroy -auto-approve \
      #         -var="ghcr_username=${{ secrets.GHCR_USERNAME }}" \
      #         -var="ghcr_pat=${{ secrets.GHCR_PAT }}" \
      #         -var="app_image=${{ secrets.APP_IMAGE }}" \
      #         -var="app_image_tag=${{ secrets.APP_IMAGE_TAG }}"
      #     fi
      #   env:
      #     ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
      #     ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
      #     ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      #     ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}

      - run: |
          if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
            terraform plan -out=tfplan \
              -var="app_image=$APP_IMAGE" \
              -var="app_image_tag=$APP_IMAGE_TAG" \
              -var="ghcr_username=$GHCR_USERNAME" \
              -var="ghcr_pat=$GHCR_PAT"

            terraform apply -auto-approve tfplan
          else
            terraform destroy -auto-approve \
              -var="app_image=$APP_IMAGE" \
              -var="app_image_tag=$APP_IMAGE_TAG" \
              -var="ghcr_username=$GHCR_USERNAME" \
              -var="ghcr_pat=$GHCR_PAT"
          fi
        env:
          ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          APP_IMAGE: ${{ secrets.APP_IMAGE }}
          APP_IMAGE_TAG: ${{ secrets.APP_IMAGE_TAG }}
  # ---------------------- VM TEST RED BD ----------------------
  # vm-test-red-bd:
  #   name: VM Test Red BD
  #   runs-on: ubuntu-latest
  #   if: >
  #     (github.event.inputs.action == 'deploy' &&
  #      (github.event.inputs.target_module == 'all' || github.event.inputs.target_module == 'vm-test-red-bd')) ||
  #     (github.event.inputs.action == 'destroy' &&
  #      (github.event.inputs.target_module == 'vm-test-red-bd'))
  #   environment: vm-test-red-bd-approval
  #   defaults:
  #     run:
  #       working-directory: IaC-azure-vm-test-red-bd
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
  #     - run: terraform init
  #     - run: |
  #         if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
  #           terraform plan -out=tfplan
  #           terraform apply -auto-approve tfplan
  #         else
  #           terraform destroy -auto-approve
  #         fi

  # ---------------------- VM TAILSCALE ----------------------
  # vm-tailscale:
  #   name: VM Tailscale
  #   runs-on: ubuntu-latest
  #   if: >
  #     (github.event.inputs.action == 'deploy' &&
  #      (github.event.inputs.target_module == 'all' || github.event.inputs.target_module == 'vm-tailscale')) ||
  #     (github.event.inputs.action == 'destroy' &&
  #      (github.event.inputs.target_module == 'vm-tailscale'))
  #   environment: vmtailscale-approval
  #   defaults:
  #     run:
  #       working-directory: IaC-azure-vm-tailscale
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #     - uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.7
  #     - run: terraform init
  #     - run: |
  #         if [ "${{ github.event.inputs.action }}" == "deploy" ]; then
  #           terraform plan -out=tfplan
  #           terraform apply -auto-approve tfplan
  #         else
  #           terraform destroy -auto-approve
  #         fi
